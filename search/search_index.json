{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lecture notes | Python for ML algorithms","text":"<p>These lecture notes provide a practical introduction to implementing classical machine learning and optimization algorithms using Python.</p> <p>The goal is to help you understand how foundational methods such as linear regression, gradient descent, and regularization techniques are built from scratch and used in practice. Each section focuses on core principles, supported by clean and readable Python code.</p> <p>No external libraries are assumed beyond Python's standard tools and, where appropriate, NumPy.</p> <p>Use these notes as a hands-on supplement to deepen your understanding of algorithmic foundations in machine learning.</p>"},{"location":"onboarding/introduction/","title":"Introduction","text":"<p>This section is designed to help you get up to speed with the core Python skills and numerical tools you'll need for this project. Whether you're new to programming or just brushing up, you'll find concise explanations and hands-on examples covering:</p> <ul> <li>Basic Python programming</li> <li>NumPy basics</li> <li>A step-by-step implementation of linear regression</li> </ul> <p>By the end of this onboarding, you'll be ready to dive deeper into more advanced topics</p>"},{"location":"onboarding/linear_regression/","title":"Linear Regression","text":"<p>In this note, we implement linear regression in one dimension using two approaches: 1. A pure Python implementation using only lists and basic operations. 2. A NumPy implementation using the analytical solution.</p> <p>We will also generate some synthetic data for demonstration.</p>"},{"location":"onboarding/linear_regression/#mathematical-formulation","title":"Mathematical formulation","text":"<p>We are given a dataset of \\(n\\) input-output pairs \\((x_i, y_i)_{i=1}^{n}\\). We assume a linear relationship: \\(y_i = a x_i + b\\). Our goal is to find the best slope \\(a\\) and intercept \\(b\\) that minimize the mean squared error:</p> \\[ \\mathrm{MSE}(a, b) = \\frac{1}{n} \\sum_{i=1}^n (y_i - (a x_i + b))^2 \\] <p>The optimal parameters are given by:</p> \\[ a = \\frac{\\sum (x_i - \\overline{x})(y_i - \\overline{y})}{\\sum (x_i - \\overline{x})^2}\\,, \\quad b = \\overline{y} - a \\overline{x} \\] <p>where \\(\\overline{x}\\) and \\(\\overline{y}\\) are the means of \\(x\\) and \\(y\\), respectively.</p>"},{"location":"onboarding/linear_regression/#pure-python-example-using-the-standard-libraries","title":"Pure Python example using the standard libraries","text":"<p>We first show off how to implement the linear regression problem using only lists and standard libraries.</p> <p>We simulate a linear relationship with added Gaussian noise.</p> <pre><code>import random\n\n# Parameters\nn = 100\na_true = 2.0\nb_true = 1.0\nnoise_std = 1.0\n\n# Generate toy data\nX_train = [random.uniform(0, 10) for _ in range(n)]\ny_train = [a_true * x + b_true + random.gauss(0, noise_std) for x in x_values]\n</code></pre> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\nnp.random.seed(42)\nn_samples = 50\n\nx = np.linspace(0, 10, n_samples)\ntrue_a = 2.5\ntrue_b = 1.0\nnoise = np.random.normal(0, 2, size=n_samples)\n\ny = true_a * x + true_b + noise\n\nplt.figure()\nplt.scatter(x, y, label=\"Noisy data\")\nplt.plot(x, true_a * x + true_b, color=\"green\", label=\"True line\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.title(\"Toy data with noise\")\nplt.legend()\n</code></pre> <p>We compute the slope and intercept using the mean, covariance, and variance. These functions are not built-in in Python, so we can implement them ourselves.</p> <pre><code>def mean(values):\n    return sum(values) / len(values)\n\ndef covariance(x, y, x_mean, y_mean):\n    return sum((xi - x_mean) * (yi - y_mean) for xi, yi in zip(x, y)) / len(x)\n\ndef variance(values, mean_value):\n    return sum((v - mean_value) ** 2 for v in values) / len(values)\n\nx_mean = mean(X_train)\ny_mean = mean(y_train)\n\ncov_xy = covariance(X_train, y_train, x_mean, y_mean)\nvar_x = variance(X_train, x_mean)\n\na = cov_xy / var_x\nb = y_mean - a * x_mean\n</code></pre>"},{"location":"onboarding/linear_regression/#numpy-implementation","title":"NumPy implementation","text":"<p>Let's perform the same but by relying on NumPy instead.</p> <p>We simulate the same data but using NumPy's module <code>np.random</code>.</p> <pre><code>import numpy as np\nnp.random.seed(42)\nn_samples = 50\n\ntrue_a = 2.5\ntrue_b = 1.0\nx = np.random.uniform(0, 10, size=n_samples)\nnoise = np.random.normal(0, 2, size=n_samples)\n\ny = true_a * x + true_b + noise\n</code></pre> <p>We can next estimate the slope and intercept as well.</p> <pre><code>x_mean = np.mean(x)\ny_mean = np.mean(y)\n\ncov_xy = np.mean((x - x_mean) * (y - y_mean))\nvar_x = np.mean((x - x_mean) ** 2)\n\na = cov_xy / var_x\nb = y_mean - a * x_mean\n</code></pre>"},{"location":"onboarding/linear_regression/#visualize-the-fitted-line","title":"Visualize the fitted line","text":"<p>Compute predictions over a test set and compare the fitted line with the true line.</p> <pre><code>X_test = np.linspace(0, 10, 100)\ny_pred = a * x_test + b\n\nplt.scatter(X_train, y_train, label=\"Noisy data\")\nplt.plot(X_test, true_a * X_test + true_b, color=\"green\", linestyle=\"--\", label=\"True line\")\nplt.plot(X_test, y_pred, color=\"red\", label=\"Fitted line\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.title(\"Linear regression fit\")\nplt.legend()\n</code></pre> <pre><code>x_mean = np.mean(x)\ny_mean = np.mean(y)\n\ncov_xy = np.mean((x - x_mean) * (y - y_mean))\nvar_x = np.mean((x - x_mean) ** 2)\n\na = cov_xy / var_x\nb = y_mean - a * x_mean\n\nx_test = np.linspace(0, 10, 100)\ny_pred = a * x_test + b\n\nplt.scatter(x, y, label=\"Noisy data\")\nplt.plot(x_test, true_a * x_test + true_b, color=\"green\", linestyle=\"--\", label=\"True line\")\nplt.plot(x_test, y_pred, color=\"red\", label=\"Fitted line\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.title(\"Linear regression fit\")\nplt.legend()\n</code></pre>"},{"location":"onboarding/linear_regression/#summary","title":"Summary","text":"<ul> <li>We generated toy data with a known linear model and added noise.</li> <li>We implemented linear regression in two ways: manually using lists, and using NumPy.</li> <li>In both cases, we derived the slope and intercept from the definitions of covariance and variance.</li> </ul>"},{"location":"onboarding/numpy101/","title":"NumPy basics","text":"<p>This chapter introduces NumPy, a powerful library for numerical computing in Python. You will learn how to create and manipulate arrays, perform vectorized operations, and explore some basic linear algebra tools.</p>"},{"location":"onboarding/numpy101/#what-is-numpy","title":"What is NumPy?","text":"<p>NumPy (Numerical Python) provides efficient data structures and operations for working with large numerical datasets. Compared to Python lists, NumPy arrays are more compact, faster, and support advanced operations such as broadcasting and linear algebra.</p> <p>To use NumPy in your code, you need to import it:</p> <pre><code>import numpy as np\n</code></pre>"},{"location":"onboarding/numpy101/#creating-arrays","title":"Creating arrays","text":"<p>You can create NumPy arrays from Python lists:</p> <pre><code>a = np.array([1, 2, 3])\nb = np.array([[1, 2], [3, 4]])\n</code></pre> <p>Useful functions for creating arrays include:</p> <pre><code>np.zeros((2, 3))       # array of zeros\nnp.ones((3,))          # array of ones\nnp.full((2, 2), 7)     # filled with 7s\nnp.eye(3)              # identity matrix\nnp.arange(0, 10, 2)    # evenly spaced values\nnp.linspace(0, 1, 5)   # linearly spaced values\n</code></pre>"},{"location":"onboarding/numpy101/#array-properties","title":"Array properties","text":"<p>Each array has several useful properties:</p> <pre><code>a.shape     # dimensions\na.ndim      # number of dimensions\na.size      # total number of elements\na.dtype     # data type\n</code></pre>"},{"location":"onboarding/numpy101/#indexing-and-slicing","title":"Indexing and slicing","text":"<p>You can access and modify elements just like Python lists:</p> <pre><code>x = np.array([[10, 20, 30], [40, 50, 60]])\nx[1, 2]       # single element\nx[:, 1]       # second column\nx[0:2, 1:]    # submatrix\n</code></pre> <p>Boolean and fancy indexing:</p> <pre><code>x[x &gt; 30]         # boolean mask\nx[[0, 1], [1, 2]] # access (0,1) and (1,2)\n</code></pre>"},{"location":"onboarding/numpy101/#array-operations","title":"Array operations","text":"<p>NumPy supports element-wise operations:</p> <pre><code>a = np.array([1, 2, 3])\nb = np.array([10, 20, 30])\n\na + b      # element-wise addition\na * b      # element-wise multiplication\na ** 2     # square each element\n</code></pre> <p>Functions that operate on entire arrays:</p> <pre><code>np.sum(a)\nnp.mean(a)\nnp.max(a)\nnp.min(a)\nnp.std(a)\n</code></pre> <p>Broadcasting allows operations on arrays of different shapes:</p> <pre><code>a = np.array([[1], [2], [3]])\nb = np.array([10, 20, 30])\na + b\n</code></pre>"},{"location":"onboarding/numpy101/#reshaping-arrays","title":"Reshaping arrays","text":"<p>You can change the shape of an array:</p> <pre><code>a = np.arange(6)\na.reshape((2, 3))\na.flatten()     # 1D copy\na.ravel()       # 1D view (if possible)\na.T             # transpose\n</code></pre> <p>Add new axes:</p> <pre><code>a[:, np.newaxis]\nnp.expand_dims(a, axis=0)\n</code></pre>"},{"location":"onboarding/numpy101/#linear-algebra-basics","title":"Linear algebra basics","text":"<p>NumPy includes basic linear algebra operations:</p> <pre><code>A = np.array([[1, 2], [3, 4]])\nb = np.array([5, 6])\n\nnp.dot(A, b)             # dot product\nnp.matmul(A, A)          # matrix multiplication\nA @ A                    # same as matmul\n\nnp.linalg.inv(A)         # inverse\nnp.linalg.norm(A)        # norm\nnp.linalg.solve(A, b)    # solve Ax = b\n</code></pre>"},{"location":"onboarding/numpy101/#random-number-generation","title":"Random number generation","text":"<p>NumPy provides a random module for generating random numbers:</p> <pre><code>np.random.seed(0)        # for reproducibility\n\nnp.random.rand(2, 3)     # uniform [0, 1)\nnp.random.randn(3)       # standard normal\nnp.random.integers(1, 10, size=(2, 2))  # random integers\nnp.random.choice([1, 2, 3], size=5)     # random choice\n</code></pre>"},{"location":"onboarding/numpy101/#practical-examples","title":"Practical examples","text":""},{"location":"onboarding/numpy101/#compute-euclidean-distance-between-points","title":"Compute Euclidean distance between points","text":"<pre><code>a = np.array([1, 2])\nb = np.array([4, 6])\ndistance = np.linalg.norm(a - b)\n</code></pre>"},{"location":"onboarding/numpy101/#normalize-each-row-of-a-matrix","title":"Normalize each row of a matrix","text":"<pre><code>X = np.array([[1, 2], [3, 4]])\nrow_norms = np.linalg.norm(X, axis=1, keepdims=True)\nX_normalized = X / row_norms\n</code></pre>"},{"location":"onboarding/numpy101/#monte-carlo-estimate-of-pi","title":"Monte Carlo estimate of pi","text":"<pre><code>np.random.seed(0)\nN = 10000\nx = np.random.rand(N)\ny = np.random.rand(N)\ninside = x**2 + y**2 &lt;= 1\npi_estimate = 4 * np.sum(inside) / N\n</code></pre>"},{"location":"onboarding/python101/","title":"Python 101","text":"<p>In this chapter, we will cover the fundamental building blocks of Python programming. These basics will prepare you for more advanced topics in numerical computing later on.</p>"},{"location":"onboarding/python101/#hello-world","title":"Hello, World!","text":"<pre><code>print(\"Hello, world!\")\n</code></pre> <p>Let's start with a classic. Create a file <code>hello_world.py</code> and write:</p> <pre><code>print(\"Hello, world!\")\n</code></pre> <p>Run your first script using your favorite IDE and by simply typing in your terminal</p> <pre><code>$ python hello_world.py\n</code></pre>"},{"location":"onboarding/python101/#variables-and-basic-types","title":"Variables and basic types","text":"<p>Python supports several basic data types. You can create variables and assign values to them like this:</p> <pre><code>x = 42        # integer\npi = 3.14     # float\nname = \"Alice\"  # string\nis_valid = True  # boolean\n</code></pre> <p>You can check the type of a variable using the <code>type()</code> function:</p> <pre><code>print(type(x))\nprint(type(pi))\nprint(type(name))\nprint(type(is_valid))\n</code></pre>"},{"location":"onboarding/python101/#strings","title":"Strings","text":"<p>Strings are sequences of characters. You can work with them in several ways:</p> <pre><code>greeting = \"Hello\"\nname = \"Alice\"\nmessage = f\"{greeting}, {name}!\"  # f-strings\nprint(message)\n</code></pre> <p>Useful string methods include:</p> <pre><code>text = \"  Python Basics  \"\ntext.strip()         # Remove whitespace\ntext.lower()         # Convert to lowercase\ntext.split()         # Split into a list of words\n\"-\".join([\"A\", \"B\"]) # Join into a string\n</code></pre>"},{"location":"onboarding/python101/#collections","title":"Collections","text":""},{"location":"onboarding/python101/#lists","title":"Lists","text":"<p>Lists are ordered collections of items:</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.append(\"kiwi\")      # Add an item\nprint(fruits[0])           # Access by index\n</code></pre> <p>Useful methods include:</p> <pre><code>fruits.insert(1, \"mango\")  # Insert at position\nfruits.remove(\"banana\")    # Remove first occurrence\nfruits.pop()               # Remove and return last item\nfruits.index(\"apple\")      # Find index of item\nfruits.count(\"apple\")      # Count occurrences\nfruits.sort()              # Sort in-place\nfruits.reverse()           # Reverse the list\nfruits.copy()              # Shallow copy\nfruits.clear()             # Remove all items\n</code></pre> <p>List comprehensions offer a concise way to create lists:</p> <pre><code>squares = [x**2 for x in range(5)]\n</code></pre> <p>is the same as doing</p> <pre><code>squares = [0, 1, 4, 9, 16]\n</code></pre>"},{"location":"onboarding/python101/#tuples","title":"Tuples","text":"<p>Tuples are similar to lists but cannot be changed (immutable):</p> <pre><code>point = (2, 3)\nx, y = point  # tuple unpacking\n</code></pre>"},{"location":"onboarding/python101/#dictionaries","title":"Dictionaries","text":"<p>Dictionaries store key-value pairs:</p> <pre><code>person = {\"name\": \"Alice\", \"age\": 30}\nprint(person[\"name\"])    # Access value by key\n</code></pre> <p>Useful methods also include:</p> <pre><code>person.keys()        # ['name', 'age']\nperson.values()      # ['Alice', 30]\nperson.items()       # dict_items([('name', 'Alice'), ('age', 30)]) -&gt; This is more tricky, it returns an iterator\nperson.get(\"age\")    # Safer access\nperson.get(\"height\", \"unknown\")  # With default\nperson.update({\"age\": 31})       # Update or add key-value pairs\nperson.pop(\"age\")    # Remove and return value\nperson.popitem()     # Remove and return a key-value pair\nperson.clear()       # Remove all items\n</code></pre>"},{"location":"onboarding/python101/#sets","title":"Sets","text":"<p>Sets store unique elements:</p> <pre><code>unique_values = set([1, 2, 2, 3])\nprint(unique_values) # {1, 2, 3}\n</code></pre> <p>Useful methods include:</p> <pre><code>unique_values.add(4)\nunique_values.pop()               # Remove and return an arbitrary element\nunique_values.remove(2)           # Remove element, error if not found\nunique_values.discard(5)          # Remove element if exists, no error\nunique_values.union({4, 5})       # Set union\nunique_values.intersection({2, 3})# Set intersection\nunique_values.difference({1})     # Set difference\nunique_values.clear()             # Remove all elements\n</code></pre>"},{"location":"onboarding/python101/#control-flow","title":"Control flow","text":""},{"location":"onboarding/python101/#conditional-statements","title":"Conditional statements","text":"<p>Use <code>if</code>, <code>elif</code>, and <code>else</code> to control what your program does based on conditions:</p> <pre><code>if age &gt; 18:\n    print(\"Adult\")\nelif age == 18:\n    print(\"Just turned adult\")\nelse:\n    print(\"Minor\")\n</code></pre>"},{"location":"onboarding/python101/#loops","title":"Loops","text":""},{"location":"onboarding/python101/#for-loops","title":"For loops","text":"<pre><code>for fruit in fruits:\n    print(fruit)\n</code></pre>"},{"location":"onboarding/python101/#while-loops","title":"While loops","text":"<pre><code>i = 0\nwhile i &lt; 3:\n    print(i)\n    i += 1\n</code></pre>"},{"location":"onboarding/python101/#using-range-enumerate-and-zip","title":"Using <code>range</code>, <code>enumerate</code>, and <code>zip</code>","text":"<pre><code>for i in range(3):\n    print(i)\n</code></pre> <pre><code>for i, fruit in enumerate(fruits):\n    print(i, fruit)\n</code></pre> <pre><code>colors = [\"red\", \"yellow\", \"purple\"]\nfor fruit, color in zip(fruits, colors):\n    print(f\"{fruit} is {color}\")\n</code></pre>"},{"location":"onboarding/python101/#functions","title":"Functions","text":"<p>Functions are blocks of code that can be reused:</p> <pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n</code></pre> <p>You can define default values for parameters:</p> <pre><code>def greet(name=\"world\"):\n    return f\"Hello, {name}!\"\n</code></pre>"},{"location":"onboarding/python101/#importing-modules","title":"Importing modules","text":"<p>Modules allow you to use external code. Here's how to import some standard library modules.</p> <p>The math module provides mathematical functions such as square roots, trigonometry, exponentials, and constants like \u03c0. <pre><code>import math\n\nprint(math.sqrt(16))      # Ssquare root\nprint(math.sin(math.pi))  # sine of pi\nprint(math.log(10))       # natural logarithm\n</code></pre></p> <p>You can also import only the functions you need:</p> <pre><code>from math import sqrt, pi\n\nprint(sqrt(25))\nprint(pi)\n</code></pre> <p>The os module gives you access to operating system features such as file and directory handling.</p> <pre><code>import os\n\nprint(os.getcwd())      # Get current working directory\nprint(os.listdir())     # List files in the current directory\n</code></pre> <p>Other useful examples:</p> <pre><code>os.mkdir(\"test_folder\")     # Create a new directory\nos.rename(\"old.txt\", \"new.txt\")  # Rename a file\n</code></pre> <p>Sometimes, it's helpful to give a shorter name to a module using as:</p> <pre><code>import numpy as np  # common convention for NumPy\n</code></pre> <p>In the next chapter, we will explore numerical computing using NumPy and SciPy.</p>"},{"location":"ridge_regression/","title":"Problem 01 \ud83d\udea7","text":"<p>Work in progress.</p>"}]}